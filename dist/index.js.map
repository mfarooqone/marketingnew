{"version":3,"sources":["index.js"],"names":["express","require","Client","qrImage","app","client","qrCodeData","on","qr","session","console","log","initialize","msg","error","catch","err","process","exit","use","json","get","req","res","qrImageBuffer","imageSync","type","writeHead","end","post","phoneNumbers","message","body","Array","isArray","Error","phoneNumber","chatId","sendMessage","status","send","PORT","env","listen"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const express = require('express');\r\nconst { Client } = require('whatsapp-web.js');\r\nconst qrImage = require('qr-image');\r\n\r\nconst app = express();\r\nconst client = new Client();\r\n\r\nlet qrCodeData;\r\n\r\nclient.on('qr', qr => {\r\n    qrCodeData = qr;\r\n});\r\n\r\nclient.on('authenticated', session => {\r\n    console.log('Authenticated');\r\n    console.log('Session: ', session);\r\n});\r\n\r\nclient.on('ready', () => {\r\n    console.log('Client is ready!');\r\n});\r\n\r\nclient.on('disconnected', () => {\r\n    console.log('Client disconnected, trying to reconnect...');\r\n    client.initialize();\r\n});\r\n\r\nclient.on('auth_failure', msg => {\r\n    console.error('Authentication failed:', msg);\r\n});\r\n\r\nclient.initialize().catch(err => {\r\n    console.error('Initialization failed:', err);\r\n    process.exit(1);\r\n});\r\n\r\napp.use(express.json());\r\n\r\napp.get('/', (req, res) => {\r\n    const qrImageBuffer = qrImage.imageSync(qrCodeData, { type: 'png' });\r\n    res.writeHead(200, { 'Content-Type': 'image/png' });\r\n    res.end(qrImageBuffer);\r\n});\r\n\r\napp.post('/send-message', async (req, res) => {\r\n    try {\r\n        const { phoneNumbers, message } = req.body;\r\n        if (!phoneNumbers || !Array.isArray(phoneNumbers) || !message) {\r\n            throw new Error('Invalid request body');\r\n        }\r\n        for (const phoneNumber of phoneNumbers) {\r\n            const chatId = `${phoneNumber}@c.us`;\r\n            await client.sendMessage(chatId, message);\r\n            console.log(`Message sent successfully to ${phoneNumber}`);\r\n        }\r\n        res.status(200).send('Messages sent successfully!');\r\n    } catch (error) {\r\n        console.error('Error sending message:', error);\r\n        res.status(500).send('Error sending message');\r\n    }\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});"]}