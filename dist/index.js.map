{"version":3,"sources":["index.js"],"names":["express","require","Client","qrImage","app","client","qrCodeData","on","qr","session","console","log","initialize","msg","error","catch","err","process","exit","use","json","get","req","res","qrImageBuffer","imageSync","type","writeHead","end","post","phoneNumbers","message","body","Array","isArray","Error","phoneNumber","chatId","sendMessage","status","send","PORT","env","listen"],"mappings":";AAAA,MAAMA,EAAUC,QAAQ,YAClB,OAAEC,GAAWD,QAAQ,mBACrBE,EAAUF,QAAQ,YAElBG,EAAMJ,IACNK,EAAS,IAAIH,EAEnB,IAAII,EAEJD,EAAOE,GAAG,KAAMC,IACZF,EAAaE,IAGjBH,EAAOE,GAAG,gBAAiBE,IACvBC,QAAQC,IAAI,iBACZD,QAAQC,IAAI,YAAaF,KAG7BJ,EAAOE,GAAG,QAAS,KACfG,QAAQC,IAAI,sBAGhBN,EAAOE,GAAG,eAAgB,KACtBG,QAAQC,IAAI,+CACZN,EAAOO,eAGXP,EAAOE,GAAG,eAAgBM,IACtBH,QAAQI,MAAM,yBAA0BD,KAG5CR,EAAOO,aAAaG,MAAMC,IACtBN,QAAQI,MAAM,yBAA0BE,GACxCC,QAAQC,KAAK,KAGjBd,EAAIe,IAAInB,EAAQoB,QAEhBhB,EAAIiB,IAAI,IAAK,CAACC,EAAKC,KACf,MAAMC,EAAgBrB,EAAQsB,UAAUnB,EAAY,CAAEoB,KAAM,QAC5DH,EAAII,UAAU,IAAK,CAAE,eAAgB,cACrCJ,EAAIK,IAAIJ,KAGZpB,EAAIyB,KAAK,gBAAiB,MAAOP,EAAKC,KAClC,IACI,MAAM,aAAEO,EAAY,QAAEC,GAAYT,EAAIU,KACtC,IAAKF,IAAiBG,MAAMC,QAAQJ,KAAkBC,EAClD,MAAM,IAAII,MAAM,wBAEpB,IAAK,MAAMC,KAAeN,EAAc,CACpC,MAAMO,KAAYD,eACZ/B,EAAOiC,YAAYD,EAAQN,GACjCrB,QAAQC,oCAAoCyB,KAEhDb,EAAIgB,OAAO,KAAKC,KAAK,+BACvB,MAAO1B,GACLJ,QAAQI,MAAM,yBAA0BA,GACxCS,EAAIgB,OAAO,KAAKC,KAAK,4BAI7B,MAAMC,EAAOxB,QAAQyB,IAAID,MAAQ,IACjCrC,EAAIuC,OAAOF,EAAM,KACb/B,QAAQC,iCAAiC8B","file":"index.js","sourceRoot":"../src","sourcesContent":["const express = require('express');\r\nconst { Client } = require('whatsapp-web.js');\r\nconst qrImage = require('qr-image');\r\n\r\nconst app = express();\r\nconst client = new Client();\r\n\r\nlet qrCodeData;\r\n\r\nclient.on('qr', qr => {\r\n    qrCodeData = qr;\r\n});\r\n\r\nclient.on('authenticated', session => {\r\n    console.log('Authenticated');\r\n    console.log('Session: ', session);\r\n});\r\n\r\nclient.on('ready', () => {\r\n    console.log('Client is ready!');\r\n});\r\n\r\nclient.on('disconnected', () => {\r\n    console.log('Client disconnected, trying to reconnect...');\r\n    client.initialize();\r\n});\r\n\r\nclient.on('auth_failure', msg => {\r\n    console.error('Authentication failed:', msg);\r\n});\r\n\r\nclient.initialize().catch(err => {\r\n    console.error('Initialization failed:', err);\r\n    process.exit(1);\r\n});\r\n\r\napp.use(express.json());\r\n\r\napp.get('/', (req, res) => {\r\n    const qrImageBuffer = qrImage.imageSync(qrCodeData, { type: 'png' });\r\n    res.writeHead(200, { 'Content-Type': 'image/png' });\r\n    res.end(qrImageBuffer);\r\n});\r\n\r\napp.post('/send-message', async (req, res) => {\r\n    try {\r\n        const { phoneNumbers, message } = req.body;\r\n        if (!phoneNumbers || !Array.isArray(phoneNumbers) || !message) {\r\n            throw new Error('Invalid request body');\r\n        }\r\n        for (const phoneNumber of phoneNumbers) {\r\n            const chatId = `${phoneNumber}@c.us`;\r\n            await client.sendMessage(chatId, message);\r\n            console.log(`Message sent successfully to ${phoneNumber}`);\r\n        }\r\n        res.status(200).send('Messages sent successfully!');\r\n    } catch (error) {\r\n        console.error('Error sending message:', error);\r\n        res.status(500).send('Error sending message');\r\n    }\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});"]}